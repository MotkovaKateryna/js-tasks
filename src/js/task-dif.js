// üìåtask 1
// –ü–æ–¥—Å—á–µ—Ç —Å—É–º–º—ã —á–∏—Å–µ–ª: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –≤
// –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –≤ –º–∞—Å—Å–∏–≤–µ

// FOR üìç
// function sum (arr){
// let sum = 0;
// for (let i = 0; i <= arr.length-1; i+=1 ){
//   console.log(arr[i]);
//   sum = sum + arr[i];
// }
// return sum
// }

// FOR OF üìç

// function sum (arr) {
//   let sum =0 ;
//   for (const item of arr) {
//     console.log(item);
//     sum += item;
//   }
//   return sum;
// }

// console.log(sum([1,8,9,5,7,9,11]));

// üìåtask 2
// –ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞: –î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏.
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.

// const string = "use laptop government code picture space";

// FOR üìç
// function searchLongestWord (string){
//   const arr = string.split(" ");
//   let longestWord = '';
// for (let i = 0; i <= arr.length-1; i+=1){
// if (longestWord.length < arr[i].length){
//   longestWord = arr[i];
// }
// }
// return longestWord;
// }

// FOR OF üìç

// function searchLongestWord (string){
//   const arr = string.split(" ");
//   let longestWord = '';
// for (const word of arr){
// if (longestWord.length < word.length){
//   longestWord = word;
// }
// }
// return longestWord;
// }

// REDUCE üìç

// function searchLongestWord(str) {
//   return str.split(' ').reduce((a, b) => (b.length > a.length) ? b : a);
//   // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ b —Å
//   //–¥–ª–∏–Ω–æ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ a. –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ b –±–æ–ª—å—à–µ, —Ç–æ –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è
//   //–Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º a, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏,
//   // –º—ã –ø–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –º–∞—Å—Å–∏–≤–µ.
// }

// console.log(searchLongestWord('There is the longest word in a string!'));

// console.log(searchLongestWord(string));

// üìåtask 3
// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–µ.

//  forEach üìç
/*
const fruits = ['kiwi', 'apple', 'kiwi', 'orange', 'kiwi', 'apple', "pear"];
// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ count: –í –Ω–∞—á–∞–ª–µ –∫–æ–¥–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç count 
const count = {};
// 2. –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –º–∞—Å—Å–∏–≤—É fruits:
// –ó–∞—Ç–µ–º –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ forEach, —á—Ç–æ–±—ã –ø–µ—Ä–µ–±—Ä–∞—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ fruits.
fruits.forEach(fruit => {
  // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä—É–∫—Ç–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:
  //3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ—Ä—É–∫—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç–µ count:
// –°—Ç—Ä–æ–∫–∞ if (!count[fruit]) –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π —Ñ—Ä—É–∫—Ç –≤ –æ–±—ä–µ–∫—Ç–µ count.
// –ï—Å–ª–∏ —Ñ—Ä—É–∫—Ç–∞ –Ω–µ—Ç –≤ –æ–±—ä–µ–∫—Ç–µ (—Ç–æ –µ—Å—Ç—å count[fruit] —Ä–∞–≤–Ω–æ undefined), —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞:
  if (!count[fruit]){
 // –¢–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±—ä–µ–∫—Ç–µ count
count[fruit] = 1;//–¥–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä—É–∫—Ç –≤ –æ–±—ä–µ–∫—Ç count –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω—ã–º 1.
  } else {
    // –¢–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Ä–∞–Ω–µ–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—ä–µ–∫—Ç count
    //4. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ—Ä—É–∫—Ç–∞:
    count[fruit] ++;
  }
});
console.log(count);//5.–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞ forEach, –æ–±—ä–µ–∫—Ç count —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä—É–∫—Ç–∞.
*/

// for .. of üìç
/*
const fruits = ['kiwi', 'apple', 'kiwi', 'orange', 'kiwi', 'apple', 'pear'];
const count = {};

for (const fruit of fruits) {
  if (!count[fruit]) {
    count[fruit] = 1;
  } else {
    count[fruit]++;
  }
}
console.log(count);
*/
// reduceüìç –ú–µ—Ç–æ–¥ reduce() –≤ JavaScript –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-—Ä–µ–¥—É–∫—Ç–æ—Ä (reducer) –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞, –ø—Ä–æ—Ö–æ–¥—è –ø–æ –Ω–µ–º—É —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ. –û–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
/*
const fruits = ['kiwi', 'apple', 'kiwi', 'orange', 'kiwi', 'apple', 'pear'];
const count = fruits.reduce((acc, fruit) => {
  acc[fruit] = (acc[fruit] || 0) + 1;

//acc[fruit] ‚Äî —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–≤–æ–π—Å—Ç–≤—É –æ–±—ä–µ–∫—Ç–∞ acc –ø–æ –∫–ª—é—á—É, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–≤–µ–Ω –∑–Ω–∞—á–µ–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π fruit.
//(acc[fruit] || 0) ‚Äî —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ –æ–±—ä–µ–∫—Ç–µ acc —Å–≤–æ–π—Å—Ç–≤–æ —Å –∫–ª—é—á–æ–º, —Ä–∞–≤–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—é fruit. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ 0.
// + 1 ‚Äî —ç—Ç–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞, –Ω–∞ 1.
// –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –ø—Ä–∏–º–µ—Ä.  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ reduce():
// reduce() ‚Äî —ç—Ç–æ –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º —Å–≤–µ—Å—Ç–∏ –º–∞—Å—Å–∏–≤ –∫ –æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –æ–±—ä–µ–∫—Ç—É count).
// –í–Ω—É—Ç—Ä–∏ reduce() –º—ã –ø–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞:
// acc (–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä) ‚Äî –æ–±—ä–µ–∫—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
// fruit ‚Äî —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ (—Ñ—Ä—É–∫—Ç).
// –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –º—ã —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ acc, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–∫—É—â–µ–º—É —Ñ—Ä—É–∫—Ç—É (fruit), –Ω–∞ 1.
// –ï—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤–∞ —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º –µ—â–µ –Ω–µ—Ç, –æ–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ 1.
// {} - –ø—É—Å—Ç–æ–π –æ–±—å–µ–∫—Ç acc

  return acc;
}, {});

console.log(count);

*/

// üìç–∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è
/*
const countItems = (list) => {
  const count = {};
  list.forEach(fruit => {
    if (!count[fruit]) {
      count[fruit] = 1;
    } else {
      count[fruit] ++;
    }
  });
  return count;
};
const fruits = ['kiwi','pear', 'apple', 'kiwi', 'orange', 'kiwi', 'pear', 'apple', 'pear', 'pear'];
const countResult = countItems(fruits);
console.log(countResult);
*/

// üìåtask 4
// –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.

// const fruits = ['kiwi','pear', 'apple', 'kiwi', 'orange', 'kiwi', 'pear', 'apple', 'pear', 'pear'];

//  üìç–í–∞—Ä–∏–∞–Ω—Ç 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Set.
// –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Set.
// –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã Set, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ó–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –ª—é–±–æ–º—É —Ç–∏–ø—É.

// const fruitsUnique = new Set(fruits);

// new Set(fruits): –ó–¥–µ—Å—å –º—ã —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ Set. –û–±—ä–µ–∫—Ç Set –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏—é —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π,
//  —Ç–æ –µ—Å—Ç—å –≤ –Ω–µ–º –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, fruits - —ç—Ç–æ –º–∞—Å—Å–∏–≤, –∏ –º—ã –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Set.
//  –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ Set –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ fruits.
// Array.from(...): –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Set, Map, –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Å–∏–≤–∞).
//  –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, –º—ã –ø–µ—Ä–µ–¥–∞–µ–º Set(fruits) –∫–∞–∫ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, Array.from(new Set(fruits)) —Å–æ–∑–¥–∞–µ—Ç
//   –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ fruits.
// const fruitsUnique = Array.from(new Set(fruits));
// console.log(fruitsUnique);

//  üìç –í–∞—Ä–∏–∞–Ω—Ç 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∏ —Ü–∏–∫–ª forEach.
/*
const fruits = ['kiwi','pear', 'apple', 'kiwi', 'orange', 'kiwi', 'pear', 'apple', 'pear', 'pear'];
const result = [];
fruits.forEach(fruit => {
  if (!result.includes(fruit)){
    result.push(fruit);
  }
})
console.log(result);
*/

//  üìç –í–∞—Ä–∏–∞–Ω—Ç 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –∏ —Ü–∏–∫–ª forEach.
/*
const myFruits = ['kiwi', 'apple', 'kiwi', 'orange', 'kiwi', 'apple'];
  const unique = {};
  myFruits.forEach(item => {
    unique[item] = true;
  });
  console.log(unique);// Object { kiwi: true, apple: true, orange: true }

  // –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑ –∫–ª—é—á–µ–π –æ–±—ä–µ–∫—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ Object.keys():
  const uniqueArray = Object.keys(unique);
  console.log( uniqueArray); // Array(3) [ "kiwi", "apple", "orange" ];

  const uniqueValues = Object.values(unique);
  console.log( uniqueValues);
*/

/*
üìç –í–∞—Ä–∏–∞–Ω—Ç 4. –ß–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é

const uniqueItems = (list) => {
  const unique = {};
  list.forEach(item => {
    unique[item] = true;
  });
  return Object.keys(unique);
}

const fruits = ['kiwi', 'apple', 'kiwi', 'orange', 'kiwi', 'apple'];
const fruitsUnique =  uniqueItems(fruits);
console.log(fruitsUnique); // Array(3) [ "kiwi", "apple", "orange" ];
*/

// üìåTASK 5
// –°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É.
/*
üìç 1 —Å–ø–æ—Å–æ–± forEach
const students = [
  { name: 'Alex', age: 20 },
  { name: 'Mike', age: 24 },
  { name: 'Masha', age: 20 },
  { name: 'Stas', age: 18 },
  { name: 'Mila', age: 20 },
  { name: 'Olya', age: 25 },
  { name: 'Asya', age: 18 },
  { name: 'Igor', age: 24 },
  { name: 'Vasya', age: 20 },
  { name: 'Petya', age: 18 },
  { name: 'Lena', age: 24 },
  { name: 'Ira', age: 20 },
  { name: 'Oleg', age: 18 },
];

const grouped = {};

students.forEach(student => {
  if (!grouped[student.age]) {
  // –ö–ª—é—á —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  // –ï—Å–ª–∏ –∫–ª—é—á (student.age) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ–±—ä–µ–∫—Ç grouped. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–ª—é—á–∞ 
  // –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è student) –≤ –º–∞—Å—Å–∏–≤–µ [student].
  // grouped[student.age] = [student];// —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤–µ—Å—å –æ–±—ä–µ–∫—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
  grouped[student.age] = [student.name];//–≤ –º–∞—Å–∏–≤ –±—É–¥–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞
} else {
  // –ï—Å–ª–∏ –∫–ª—é—á —Ä–∞–Ω–µ–µ —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—ä–µ–∫—Ç, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–º –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ push.
  // grouped[student.age].push(student);//—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤–µ—Å—å –æ–±—ä–µ–∫—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
  grouped[student.age].push(student.name);//–≤ –º–∞—Å–∏–≤ –±—É–¥–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
}
});
console.log(grouped);
 */

//  üìç2 —Å–ø–æ—Å–æ–± reduce
/*
const students = [
  { name: 'Alex', age: 20 },
  { name: 'Mike', age: 24 },
  { name: 'Masha', age: 20 },
  { name: 'Stas', age: 18 },
  { name: 'Mila', age: 20 },
  { name: 'Olya', age: 22 },
  { name: 'Asya', age: 18 },
  { name: 'Igor', age: 24 },
  { name: 'Vasya', age: 20 },
  { name: 'Petya', age: 18 },
  { name: 'Lena', age: 24 },
  { name: 'Ira', age: 20 },
  { name: 'Oleg', age: 18 },
];

const groupedByAge = students.reduce((acc, student) => {
  const { age, name } = student;
  if (!acc[age]) {
    acc[age] = [name];
  } else {
    acc[age].push(name);
  }
  return acc;
}, {});

console.log(groupedByAge);
*/

// üìåtask 6

// –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:
// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - –º–∞—Å—Å–∏–≤ –∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏ —Å—É–º–º—É –≤ –≤–∏–¥–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞.
// –ï—Å–ª–∏ —Å—É–º–º–∞ –¥–≤—É—Ö –ª—é–±—ã—Ö —á–∏—Å–µ–ª –º–∞—Å—Å–∏–≤–∞ –∏–∑ 1-–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ä–∞–≤–Ω–∞ —á–∏—Å–ª—É, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç 2-–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º,
// —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ —ç—Ç–∏—Ö –¥–≤—É—Ö —á–∏—Å–µ–ª –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ.
// –ï—Å–ª–∏ —Ä–µ—à–µ–Ω–∏—è –Ω–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.

/*
const myNumbers = [3, 5, -4, 8, 11, 1, -1, 6, -14];
const sum = 10;

const findPairs = (nums, target) => {
  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
  //–í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –º—ã —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ "–±–µ–∂–∏–º" –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞ nums,
  // –Ω–∏—á–∞–Ω–∞—è —Å 1-–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–∏–Ω–¥–µ–∫—Å i = 0). –í–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ nums –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é numFirst.
  for (let i = 0; i < nums.length; i++) {
    const numFirst = nums[i];
    // –í–ª–æ–∂–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
    //–ß—Ç–æ–±—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é numFirst –ø–æ–ª—É—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞ –Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç
    //  –º–∞—Å—Å–∏–≤–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ü–∏–∫–ª. –≠—Ç–æ—Ç —Ü–∏–∫–ª "—Å—Ç–∞—Ä—Ç—É–µ—Ç" —Å–æ 2-–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ nums (–∏–Ω–¥–µ–∫—Å j = i + 1).
    // –í–Ω—É—Ç—Ä–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é numSecond.
    for (let j = i + 1; j < nums.length; j++) {
      const numSecond = nums[j];
      // –£—Å–ª–æ–≤–∏–µ
      if (numFirst + numSecond === target) {
        // –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        return [numFirst, numSecond];
      }
    }
  }
  // –£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
  return [];
};

console.log(findPairs(myNumbers, sum));
*/

// üìåtask 7
// –ü–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ –ª—é–±–∏–º—ã—Ö –ø–∏—Ü—Ü –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞

// üìç 1 —Å–ø–æ—Å–æ–±: forEach + –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π for
// const friends = [
//   { name: 'alex', pizzas: ['cheese', 'pepperoni'] },
//   { name: 'mike', pizzas: ['salami', 'margarita'] },
//   { name: 'stas', pizzas: ['meat'] },
//   { name: 'anna', pizzas: ['fish'] }
// ];

// const arrayPizzas = [];

// friends.forEach( friend=> {
//   const {pizzas} = friend;
//   for (let i = 0; i < pizzas.length; i++){
//   arrayPizzas.push(pizzas[i]);
//   }
// })
// console.log(arrayPizzas);

// üìç2 —Å–ø–æ—Å–æ–±: reduce

// const pizzas = friends.reduce((accum, current) => {
//–ù–∞ —Å—Ç–∞—Ä—Ç–µ, —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π accum - –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ []
//–î–∞–ª–µ–µ, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ "–±–µ–∂–∏–º" –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞ –∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ accum.
//–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ accum —ç—Ç–æ - –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è:
// –í—Å–µ —Ç–µ–∫—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π accum, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
// –í—Å–µ –ø–∏—Ü—Ü—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π current: current.pizzas
//   return [...accum, ...current.pizzas];
// }, []);

// console.log(pizzas);
/*
// üìåTASK 8
// –ó–∞–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É (—Å–∏–º–≤–æ–ª—ã —Å—Ç—Ä–æ–∫–∏) –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
const myStr = 'pizza';

// üìç –í–∞—Ä–∏–∞–Ω—Ç 1 - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª üìç
// –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é reverseString, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π str.
const reverseString = (str) => {
  const reversed = [];
  //–î–∞–ª–µ–µ —Å–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –∏—Ç–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–∏–Ω–¥–µ–∫—Å i = str.length - 1).
  //–ü—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π str –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ reversed.
  for (let i = str.length - 1; i >= 0; i--) {
    reversed.push(str[i]);
  }
  // –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Ü–∏–∫–ª–∞, –º–∞—Å—Å–∏–≤ reversed —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ .join().
  return reversed.join('');
};
const reverseResult = reverseString(myStr);
console.log(reverseResult); // azzip

// üìç –í–∞—Ä–∏–∞–Ω—Ç 2 - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ .split() –∏ .reverse() üìç
const reversedStr = myStr.split("").reverse().join('');
console.log(reversedStr);
// –∏–ª–∏ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è
const reverseString2 = (str) => {
  return str.split('').reverse().join('');
};
// –ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç, –º—ã —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ .split(), —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑ —Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π str. –î–∞–ª–ª–µ–µ, 
// –ø–æ —Ü–µ–ø–æ—á–∫–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É –º–∞—Å—Å–∏–≤—É 2 –º–µ—Ç–æ–¥–∞:
// –ú–µ—Ç–æ–¥ .reverse, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ (–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º, –∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π ‚Äî –ø–µ—Ä–≤—ã–º).
// –ú–µ—Ç–æ–¥ .join, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ —Å—Ç—Ä–æ–∫—É. –í –º–µ—Ç–æ–¥–µ .join() —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å,
//  –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ - —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–≤—ã—á–∫–∏ .join('').


 */



// üìåTASK 9
//   –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º: –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º (—á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö)

// üìç –í–∞—Ä–∏–∞–Ω—Ç 1
const string = '–°–µ–ª –≤ –æ–∑–µ—Ä–µ –±–µ—Ä–µ–∑–æ–≤ –ª–µ—Å';
const isPalindrom = (str) => {
  const splitedString = str.split(' ').join('').toLowerCase();
  const reversed = [];
  for (let i = str.length - 1; i >= 0; i--) {
    reversed.push(str[i]);
  }
  const reversedString = reversed.filter((el) => el !== null && el !== undefined && el !== ' ').join('').toLowerCase();

reversedString === splitedString ? console.log(`${str} is palindrom`) : console.log(`${str} isn't palindrom`);
}
isPalindrom(string);
isPalindrom('pizza')

// üìç –í–∞—Ä–∏–∞–Ω—Ç 2
function isSentencePalindrome(sentence) {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ-–±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
  const cleanedSentence = sentence.replace(/[^a-zA-Z]/g, '').toLowerCase();
  const reversedSentence = cleanedSentence.split('').reverse().join('');
  cleanedSentence === reversedSentence ? console.log(`${sentence} is palindrom`) : console.log(`${sentence} isn't palindrom`);
  return cleanedSentence === reversedSentence;
}
// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
console.log(isSentencePalindrome("A man, a plan, a canal, Panama!")); // true
console.log(isSentencePalindrome("Hello, world!")); // false
console.log(isSentencePalindrome('–°–µ–ª –≤ –æ–∑–µ—Ä–µ –±–µ—Ä–µ–∑–æ–≤ –ª–µ—Å')); // true
